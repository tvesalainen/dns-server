/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.sw_nets.net.dns;

import java.io.IOException;
import java.net.SocketAddress;

/**
 *
 * @author tkv
 */
public class Message
{
    /**
     * A 16 bit identifier assigned by the program that
        generates any kind of query.  This identifier is copied
        the corresponding reply and can be used by the requester
        to match up replies to outstanding queries.
     */
    protected int id;
    /**
     * A one bit field that specifies whether this message is a
        query (0), or a response (1).
     */
    protected int qr;
    /**
     * A four bit field that specifies kind of query in this
        message.  This value is set by the originator of a query
        and copied into the response.  The values are:

        0               a standard query (QUERY)

        1               an inverse query (IQUERY)

        2               a server status request (STATUS)

        3-15            reserved for future use

     */
    protected int opCode;
    /**
     * Authoritative Answer - this bit is valid in responses,
        and specifies that the responding name server is an
        authority for the domain name in question section.

        Note that the contents of the answer section may have
        multiple owner names because of aliases.  The AA bit
        corresponds to the name which matches the query name, or
        the first owner name in the answer section
     */
    protected int aa;
    /**
     * TrunCation - specifies that this message was truncated
        due to length greater than that permitted on the
        transmission channel
     */
    protected int tc;
    /**
     * Recursion Desired - this bit may be set in a query and
        is copied into the response.  If RD is set, it directs
        the name server to pursue the query recursively.
        Recursive query support is optional.

     */
    protected int rd;
    /**
     * Recursion Available - this be is set or cleared in a
        response, and denotes whether recursive query support is
        available in the name server.
     */
    protected int ra;
    /**
     * Reserved for future use.  Must be zero in all queries
        and responses.
     */
    protected int z;
    protected int rCode;
    protected Question question;
    protected ResourceRecord[] answers;
    protected ResourceRecord[] authorities;
    protected ResourceRecord[] additionals;
    private SocketAddress recipient;

    public Message(
        long id,
        SocketAddress recipient,
        boolean query,
        int opCode,
        boolean authorative,
        boolean truncated,
        boolean recursionDesired,
        boolean recursionAvailable,
        int z,
        int rCode,
        Question question,
        ResourceRecord[] answers,
        ResourceRecord[] authorities,
        ResourceRecord[] additionals
            )
    {
        this.id = (int) (id & 0xffff);
        this.recipient = recipient;
        if (!query)
        {
            this.qr = 1;
        }
        this.opCode = opCode;
        if (authorative)
        {
            this.aa = 1;
        }
        if (truncated)
        {
            this.tc = 1;
        }
        if (recursionDesired)
        {
            this.rd = 1;
        }
        if (recursionAvailable)
        {
            this.ra = 1;
        }
        this.z = z;
        this.rCode = rCode;
        this.question = question;
        this.answers = answers;
        this.authorities = authorities;
        this.additionals = additionals;
    }

    public Message(byte[] data) throws IOException, RCodeException
    {
        MessageReader reader = new MessageReader(data);
        id = reader.read16();
        int xi = reader.read16();
        qr = xi>>15;
        opCode = (xi>>11) & 0xf;
        aa = (xi>>10) & 0x1;
        tc = (xi>>9) & 0x1;
        rd = (xi>>8) & 0x1;
        ra = (xi>>7) & 0x1;
        z = (xi>>4) & 0x7;
        rCode = xi & 0xf;
        int qdCount = reader.read16();
        if (qdCount > 1)
        {
            throw new RCodeException("Multiple questions", RCodeException.NOT_IMPLEMENTED);
        }
        int anCount = reader.read16();
        int nsCount = reader.read16();
        int arCount = reader.read16();
        question = new Question(reader);
        answers = new ResourceRecord[anCount];
        for (int ii=0;ii<anCount;ii++)
        {
            answers[ii] = new ResourceRecord(reader);
        }
        authorities = new ResourceRecord[nsCount];
        for (int ii=0;ii<nsCount;ii++)
        {
            authorities[ii] = new ResourceRecord(reader);
        }
        additionals = new ResourceRecord[arCount];
        for (int ii=0;ii<arCount;ii++)
        {
            additionals[ii] = new ResourceRecord(reader);
        }
        //check(data);
    }

    private void check(byte[] data) throws IOException
    {
        byte[] bb = toByteArray();
        for (int ii=0;ii<bb.length;ii++)
        {
            if (bb[ii] != data[ii])
            {
                System.err.println(ii+": "+bb[ii]+" != "+data[ii]);
            }
        }
    }

    public byte[] toByteArray() throws IOException
    {
        MessageWriter writer = new MessageWriter();
        writer.write16(id);
        int xi = 0;
        xi |= qr<<15;
        xi |= getOpCode()<<11;
        xi |= aa<<10;
        xi |= tc<<9;
        xi |= rd<<8;
        xi |= ra<<7;
        xi |= z<<4;
        xi |= getRCode();
        writer.write16(xi);
        if (getQuestion() != null)
        {
            writer.write16(1);
        }
        else
        {
            writer.write16(0);
        }
        if (getAnswers() != null)
        {
            writer.write16(getAnswers().length);
        }
        else
        {
            writer.write16(0);
        }
        if (getAuthorities() != null)
        {
            writer.write16(getAuthorities().length);
        }
        else
        {
            writer.write16(0);
        }
        if (getAdditionals() != null)
        {
            writer.write16(getAdditionals().length);
        }
        else
        {
            writer.write16(0);
        }
        if (getQuestion() != null)
        {
            question.write(writer);
        }
        if (getAnswers() != null)
        {
            for (ResourceRecord answer : getAnswers())
            {
                answer.write(writer);
            }
        }
        if (getAuthorities() != null)
        {
            for (ResourceRecord authority : getAuthorities())
            {
                authority.write(writer);
            }
        }
        if (getAdditionals() != null)
        {
            for (ResourceRecord additional : getAdditionals())
            {
                additional.write(writer);
            }
        }
        return writer.toByteArray();
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        sb.append("Message(ID="+getId()+" "+Constants.qr(qr)+" OPCODE="+Constants.opCode(getOpCode()));
        if (aa != 0)
        {
            sb.append(" Authorative");
        }
        if (tc != 0)
        {
            sb.append(" Truncation");
        }
        if (rd != 0)
        {
            sb.append(" Recursion desired");
        }
        if (ra != 0)
        {
            sb.append(" Recursion available");
        }
        if (getQuestion() != null)
        {
            sb.append("\nQuestion\n");
            sb.append(getQuestion().toString()+"\n");
        }
        if (getAnswers() != null && getAnswers().length > 0)
        {
            sb.append("Answers\n");
            for (ResourceRecord r : getAnswers())
            {
                sb.append(r.toString()+"\n");
            }
        }
        if (getAuthorities() != null && getAuthorities().length > 0)
        {
            sb.append("Authorities\n");
            for (ResourceRecord r : getAuthorities())
            {
                sb.append(r.toString()+"\n");
            }
        }
        if (getAdditionals() != null && getAdditionals().length > 0)
        {
            sb.append("Additionals\n");
            for (ResourceRecord r : getAdditionals())
            {
                sb.append(r.toString()+"\n");
            }
        }
        sb.append(")\n");
        return sb.toString();
    }

    public boolean isQuery()
    {
        return qr == 0;
    }

    /**
     * @return the id
     */
    public int getId()
    {
        return id;
    }

    /**
     * @return the opCode
     */
    public int getOpCode()
    {
        return opCode;
    }

    /**
     * @return the rCode
     */
    public int getRCode()
    {
        return rCode;
    }

    /**
     * @param rCode the rCode to set
     */
    public void setRCode(int rCode)
    {
        this.rCode = rCode;
    }

    /**
     * @return the question
     */
    public Question getQuestion()
    {
        return question;
    }

    /**
     * @param question the question to set
     */
    public void setQuestion(Question question)
    {
        this.question = question;
    }

    /**
     * @return the answers
     */
    public ResourceRecord[] getAnswers()
    {
        return answers;
    }

    /**
     * @param answers the answers to set
     */
    public void setAnswers(ResourceRecord... answers)
    {
        this.answers = answers;
    }

    /**
     * @return the authorities
     */
    public ResourceRecord[] getAuthorities()
    {
        return authorities;
    }

    /**
     * @param authorities the authorities to set
     */
    public void setAuthorities(ResourceRecord... authorities)
    {
        this.authorities = authorities;
    }

    /**
     * @return the additionals
     */
    public ResourceRecord[] getAdditionals()
    {
        return additionals;
    }

    /**
     * @param additionals the additionals to set
     */
    public void setAdditionals(ResourceRecord... additionals)
    {
        this.additionals = additionals;
    }

    public boolean isAuthoritative()
    {
        return aa == 1;
    }
    public boolean isTruncated()
    {
        return tc == 1;
    }
    public boolean recursionDesired()
    {
        return rd == 1;
    }
    public boolean recursionAvailable()
    {
        return rd == 1;
    }

    /**
     * @return the recipient
     */
    public SocketAddress getRecipient()
    {
        return recipient;
    }

    /**
     * @param recipient the recipient to set
     */
    public void setRecipient(SocketAddress recipient)
    {
        this.recipient = recipient;
    }

    /**
     * @param id the id to set
     */
    public void setId(int id)
    {
        this.id = id;
    }
}
