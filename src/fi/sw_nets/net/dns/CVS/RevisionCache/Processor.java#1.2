/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.sw_nets.net.dns;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;



/**
 *
 * @author tkv
 */
public abstract class Processor implements Callable<Object>
{
    protected InetSocketAddress sender;
    protected byte[] data;
    public Processor()
    {
    }

    public abstract void send(Message msg) throws IOException;
    protected void processQuery(Message msg) throws SocketException, IOException, InterruptedException
    {
        try
        {
            doProcessQuery(msg);
        }
        catch (RCodeException ex)
        {
            sendNegative(msg, ex.getRCode());
        }
    }
    
    private void doProcessQuery(Message msg) throws SocketException, IOException, InterruptedException, RCodeException
    {

        switch (msg.getOpCode())
        {
            case Constants.OPCODE_QUERY:
                break;
            default:    
                throw new RCodeException(msg.getOpCode()+" OPCODE not implemented", RCodeException.NOT_IMPLEMENTED);
        }
        Question question = msg.getQuestion();
        switch (question.getQType())
        {
            case Constants.AXFR:
                ResponseMessage zoneTransfer = Cache.getZoneTransfer(question.getQName());
                if (zoneTransfer != null)
                {
                    zoneTransfer.setId(msg.getId());
                    send(zoneTransfer);
                }
                else
                {
                    throw new RCodeException(question.getQName()+" zone not known", RCodeException.REFUSED);
                }
                break;
            case Constants.A:
            case Constants.MX:
            case Constants.NS:
            case Constants.PTR:
            case Constants.AAAA:
            case Constants.ANY:
            break;
            default:
                throw new RCodeException(question.getQType()+" QTYPE not implemented", RCodeException.NOT_IMPLEMENTED);
        }
        Set<ResourceRecord> set = Cache.resolveAuthorative(question, sender);
        if (set != null && !set.isEmpty())
        {
System.err.println("Zone hit "+question);
            sendAnswer(msg, set, true);
        }
        else
        {
            if (msg.recursionDesired())
            {
                boolean found = false;
                set = Cache.getCache(question);
                if (set != null && !set.isEmpty())
                {
                    found = sendAnswer(msg, set, false);
                    if (found)
                    {
System.err.println("Cache hit "+question);
                    }
                }
                if (!found)
                {
                    List<InetSocketAddress> nsList = Cache.getNameServerFor(question.getQName().getDomain());
                    nsList.addAll(Cache.getNameServers());
                    for (InetSocketAddress nameServer : nsList)
                    {
                        QueryMessage qm = new QueryMessage(nameServer, question);
                        send(qm);
                        Message answer = qm.waitForAnswer(2, TimeUnit.SECONDS);
                        if (answer != null)
                        {
                            answer.setId(msg.getId());
                            answer.setRecipient(sender);
                            send(answer);
                            found = true;
System.err.println("Recursive hit "+question);
                            break;
                        }
                    }
                    if (!found)
                    {
                        sendNegative(msg, Constants.RCODE_NAME_ERROR);
                    }
                }
            }
            else
            {
                sendNegative(msg, Constants.RCODE_NAME_ERROR);
            }
        }
    }

    protected boolean sendAnswer(Message msg, Set<ResourceRecord> set, boolean authorative) throws IOException
    {
        Set<ResourceRecord> answers = new HashSet<ResourceRecord>();
        Set<ResourceRecord> authorities = new HashSet<ResourceRecord>();
        Set<ResourceRecord> additionals = new HashSet<ResourceRecord>();

        fill(msg.getQuestion(), set, answers, authorities, additionals);
        ResponseMessage response = new ResponseMessage(
                msg.getId(),
                sender,
                authorative,
                msg.getQuestion(),
                answers.toArray(new ResourceRecord[answers.size()]),
                authorities.toArray(new ResourceRecord[authorities.size()]),
                additionals.toArray(new ResourceRecord[additionals.size()])
                );
        if (response.hasAnswer())
        {
            send(response);
            return true;
        }
        return false;
    }

    protected void sendNegative(Message msg, int rCode) throws IOException
    {
        ResponseMessage response = new ResponseMessage(
                msg.getId(),
                sender,
                rCode,
                msg.getQuestion()
                );
        send(response);
    }

    protected void fill(
        Question question,
        Set<ResourceRecord> set,
        Set<ResourceRecord> answers,
        Set<ResourceRecord> authorities,
        Set<ResourceRecord> additionals
        )
    {
        Iterator<ResourceRecord> it = set.iterator();
        while (it.hasNext())
        {
            ResourceRecord rr = it.next();
            if (question.equalsANY(rr.getQuestion()))
            {
                answers.add(rr);
            }
            else
            {
                additionals.add(rr);
            }
            switch (rr.getType())
            {
                case Constants.MX:
                {
                    MX mx = (MX) rr.getRData();
                    Set<ResourceRecord> recur = Cache.resolveFromCache(mx.getExchange(), Constants.A, sender);
                    if (recur != null)
                    {
                        fill(question, recur, answers, authorities, additionals);
                    }
                }
                break;
                case Constants.NS:
                {
                    NS ns = (NS) rr.getRData();
                    Set<ResourceRecord> recur = Cache.resolveFromCache(ns.getNsDName(), Constants.A, sender);
                    if (recur != null)
                    {
                        fill(question, recur, answers, authorities, additionals);
                    }
                }
                break;
            }
        }
    }
    protected void processResponse(Message msg)
    {
        boolean waited = QueryMessage.answer(msg, sender);
        if (waited)
        {
            ResourceRecord[] ar = msg.getAnswers();
            if (ar != null)
            {
                for (ResourceRecord rr : ar)
                {
                    Cache.add(rr);
                }
            }
            ar = msg.getAuthorities();
            if (ar != null)
            {
                for (ResourceRecord rr : ar)
                {
                    Cache.add(rr);
                }
            }
            ar = msg.getAdditionals();
            if (ar != null)
            {
                for (ResourceRecord rr : ar)
                {
                    Cache.add(rr);
                }
            }
        }
        else
        {
            System.err.println("DROPPED "+msg);
        }
    }

}
