/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fi.sw_nets.net.dns;

import fi.sw_nets.net.IllegalNetMaskException;
import fi.sw_nets.net.SubNet;
import fi.sw_nets.net.dns.jaxb.dns.Dns;
import fi.sw_nets.net.dns.jaxb.dns.Dns.Master;
import fi.sw_nets.net.dns.jaxb.dns.Dns.NameServer;
import fi.sw_nets.net.dns.jaxb.dns.Dns.Slave;
import fi.sw_nets.net.dns.jaxb.dns.Dns.Zone;
import fi.sw_nets.net.dns.jaxb.dns.ObjectFactory;
import fi.sw_nets.net.dns.jaxb.dns.ResourceRecord.ARr;
import fi.sw_nets.net.dns.jaxb.dns.ResourceRecord.MxRr;
import fi.sw_nets.net.dns.jaxb.dns.ResourceRecord.NsRr;
import fi.sw_nets.util.ConcurrentSetMap;
import fi.sw_nets.util.SetMap;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

/**
 *
 * @author tkv
 */
public class Cache implements Runnable
{
    public static final String PACKAGE = "fi.sw_nets.net.dns.jaxb.dns";

    private static Map<DomainName,SetMap<Question,ResourceRecord>> outerZones = new HashMap<DomainName,SetMap<Question,ResourceRecord>>();
    private static Map<DomainName,ResponseMessage> zoneTransferMessage = new HashMap<DomainName,ResponseMessage>();
    private static Map<DomainName,SetMap<Question,ResourceRecord>> innerZones = new HashMap<DomainName,SetMap<Question,ResourceRecord>>();
    private static Map<SubNet,SetMap<Question,ResourceRecord>> innerNets = new HashMap<SubNet,SetMap<Question,ResourceRecord>>();
    private static ConcurrentSetMap<Question,ResourceRecord> cache = new ConcurrentSetMap<Question,ResourceRecord>();
    private static List<InetSocketAddress> nameServers = new ArrayList<InetSocketAddress>();
    private static List<InetSocketAddress> slaves = new ArrayList<InetSocketAddress>();
    private static Map<DomainName,InetSocketAddress> masters = new HashMap<DomainName,InetSocketAddress>();
    private static File config;
    private static Dns dns;
    private static ObjectFactory factory = new ObjectFactory();

    public Cache(File conf) throws JAXBException, UnknownHostException, IllegalNetMaskException, IOException, RCodeException
    {
        config = conf;
        JAXBContext jaxbCtx = JAXBContext.newInstance(PACKAGE);
        Unmarshaller unmarshaller = jaxbCtx.createUnmarshaller();
        dns = (Dns) unmarshaller.unmarshal(config); //NOI18N
        init();
        initOuterZones();
        initInnerZones();
        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
        scheduler.scheduleAtFixedRate(this, 0, 1, TimeUnit.HOURS);
    }

    public static void save() throws JAXBException, FileNotFoundException, IOException
    {
        FileOutputStream out = new FileOutputStream(config);
        JAXBContext jaxbCtx = JAXBContext.newInstance(PACKAGE);
        Marshaller marshaller = jaxbCtx.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_ENCODING, "utf-8");
        //NOI18N
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
        marshaller.marshal(dns, out);
        out.close();
    }
    private static void init()
    {
        for (NameServer nameServer : dns.getNameServer())
        {
            nameServers.add(new InetSocketAddress(nameServer.getAddress(), 53));
        }
        for (Master master : dns.getMaster())
        {
            masters.put(new DomainName(master.getDomain()), new InetSocketAddress(master.getAddress(), 53));
        }
        for (Slave slave : dns.getSlave())
        {
            slaves.add(new InetSocketAddress(slave.getAddress(), 53));
        }
    }
    private static void initOuterZones() throws UnknownHostException, IllegalNetMaskException
    {
        for (Zone zone : dns.getZone())
        {
            DomainName domain = new DomainName(zone.getName());
            SOA soa = new SOA(
                    zone.getMname(),
                    zone.getRname(),
                    zone.getSerial().intValue(),
                    zone.getRefresh().intValue(),
                    zone.getRetry().intValue(),
                    zone.getExpire().intValue(),
                    zone.getMinimum().intValue()
                    );
            SetMap<Question,ResourceRecord> outerSetMap = new SetMap<Question,ResourceRecord>();
            ResourceRecord soaRR = new ResourceRecord(domain, Constants.SOA, soa.getMinimum(), soa);
            outerSetMap.put(soaRR.getQuestion(), soaRR);
            if (zone.getOuter() != null)
            {
                ResourceRecord[] zt = new ResourceRecord[zone.getOuter().getARrOrMxRrOrNsRr().size()+2];
                int zti = 0;
                zt[zti++] = soaRR;
                for (Object oo : zone.getOuter().getARrOrMxRrOrNsRr())
                {
                    ResourceRecord rr = addRR(domain, outerSetMap, oo);
                    zt[zti++] = rr;
                }
                zt[zti++] = soaRR;
                ResponseMessage zoneTransfer = new ResponseMessage(
                        0,
                        null,
                        true,
                        soaRR.getQuestion(),
                        zt,
                        null,
                        null
                        );
                zoneTransferMessage.put(domain, zoneTransfer);
            }
            outerZones.put(domain, outerSetMap);
        }
    }
    private static void initInnerZones() throws UnknownHostException, IllegalNetMaskException
    {
        for (Zone zone : dns.getZone())
        {
            DomainName domain = new DomainName(zone.getName());
            SOA soa = new SOA(
                    zone.getMname(),
                    zone.getRname(),
                    zone.getSerial().intValue(),
                    zone.getRefresh().intValue(),
                    zone.getRetry().intValue(),
                    zone.getExpire().intValue(),
                    zone.getMinimum().intValue()
                    );
            SetMap<Question,ResourceRecord> innerSetMap = innerZones.get(domain);
            if (innerSetMap == null)
            {
                innerSetMap = new SetMap<Question,ResourceRecord>();
                innerZones.put(domain, innerSetMap);
            }
            if (zone.getInner() != null)
            {
                SubNet subnet = new SubNet(zone.getInner().getNet());
                innerNets.put(subnet, innerSetMap);
                for (Object oo : zone.getInner().getARrOrMxRrOrNsRr())
                {
                    addRR(domain, innerSetMap, oo);
                }
            }
        }
    }

    private static ResourceRecord addRR(DomainName dn, SetMap<Question,ResourceRecord> map, Object oo) throws UnknownHostException
    {
        if (oo instanceof ARr)
        {
            ARr a = (ARr) oo;
            A aa = new A(InetAddress.getByName(a.getAddress()));
            ResourceRecord rr = new ResourceRecord(new DomainName(a.getName()), Constants.A, a.getTtl().intValue(), aa);
            map.put(rr.getQuestion(), rr);
            return rr;
        }
        if (oo instanceof MxRr)
        {
            MxRr mxr = (MxRr) oo;
            MX mx = new MX(mxr.getExchange(), mxr.getPreference().intValue());
            ResourceRecord rr = new ResourceRecord(dn, Constants.MX, mxr.getTtl().intValue(), mx);
            map.put(rr.getQuestion(), rr);
            return rr;
        }
        if (oo instanceof NsRr)
        {
            NsRr nsr = (NsRr) oo;
            NS ns = new NS(nsr.getNsdname());
            ResourceRecord rr = new ResourceRecord(dn, Constants.NS, nsr.getTtl().intValue(), ns);
            map.put(rr.getQuestion(), rr);
            return rr;
        }
        throw new IllegalArgumentException(oo.toString()+" unknown");
    }

    public static void refreshZones() throws IOException, RCodeException, UnknownHostException, IllegalNetMaskException, JAXBException
    {
        for (DomainName name : masters.keySet())
        {
            InetSocketAddress address = masters.get(name);
            Message msg = null;
            try
            {
                msg = ZoneTransfer.getZone(name, address);
            }
            catch (IOException ex)
            {
                ex.printStackTrace();
                continue;
            }
            catch (RCodeException ex)
            {
                ex.printStackTrace();
                continue;
            }
            ResourceRecord[] ar = msg.getAnswers();
            if (ar.length > 0)
            {
                Zone target = null;
                for (Zone zone : dns.getZone())
                {
                    if (name.toString().equalsIgnoreCase(zone.getName()))
                    {
                        target = zone;
                        break;
                    }
                }
                if (target != null)
                {
                    target.setOuter(factory.createResourceRecord());
                    for (int ii=0;ii<ar.length-1;ii++)
                    {
                        ResourceRecord rr = ar[ii];
                        switch (rr.getType())
                        {
                            case Constants.SOA:
                            {
                                SOA soa = (SOA) rr.getRData();
                                target.setName(rr.getName().toString());
                                target.setTtl(BigInteger.valueOf(rr.getTtl()));
                                target.setMname(soa.getMName().toString());
                                target.setRname(soa.getRName().toString());
                                target.setSerial(BigInteger.valueOf(soa.getSerial()));
                                target.setRefresh(BigInteger.valueOf(soa.getRefresh()));
                                target.setRetry(BigInteger.valueOf(soa.getRetry()));
                                target.setExpire(BigInteger.valueOf(soa.getExpire()));
                                target.setMinimum(BigInteger.valueOf(soa.getMinimum()));
                            }
                            break;
                            case Constants.A:
                            {
                                A a = (A) rr.getRData();
                                ARr arr = factory.createResourceRecordARr();
                                target.getOuter().getARrOrMxRrOrNsRr().add(arr);
                                arr.setName(rr.getName().toString());
                                arr.setTtl(BigInteger.valueOf(rr.getTtl()));
                                arr.setAddress(a.getAddress().getHostAddress());
                            }
                            break;
                            case Constants.MX:
                            {
                                MX mx = (MX) rr.getRData();
                                MxRr mxrr = factory.createResourceRecordMxRr();
                                target.getOuter().getARrOrMxRrOrNsRr().add(mxrr);
                                mxrr.setName(rr.getName().toString());
                                mxrr.setTtl(BigInteger.valueOf(rr.getTtl()));
                                mxrr.setPreference(BigInteger.valueOf(mx.getPreference()));
                                mxrr.setExchange(mx.getExchange().toString());
                            }
                            break;
                            case Constants.NS:
                            {
                                NS ns = (NS) rr.getRData();
                                NsRr nsrr = factory.createResourceRecordNsRr();
                                target.getOuter().getARrOrMxRrOrNsRr().add(nsrr);
                                nsrr.setName(rr.getName().toString());
                                nsrr.setTtl(BigInteger.valueOf(rr.getTtl()));
                                nsrr.setNsdname(ns.getNsDName().toString());
                            }
                            break;
                        }
                    }
                }
            }
        }
        initOuterZones();
        save();
    }

    public static Set<ResourceRecord> resolveAuthorative(Question question, InetSocketAddress sender)
    {
        return resolveAuthorative(question.getQName(), question.getQType(), sender);
    }

    public static Set<ResourceRecord> resolveAuthorative(DomainName dn, int type, InetSocketAddress sender)
    {
        Question question = new Question(dn, type);
        SubNet subnet = inner(sender);
        if (subnet != null)
        {
            Set<ResourceRecord> set = getInner(question, subnet);
            if (set != null && !set.isEmpty())
            {
                return set;
            }
            return null;
        }
        else
        {
            Set<ResourceRecord> set = getZone(question);
            if (set != null && !set.isEmpty())
            {
                return set;
            }
            return null;
        }
    }

    public static SubNet inner(InetSocketAddress sender)
    {
        for (SubNet subnet : innerNets.keySet())
        {
            if (subnet.includes(sender.getAddress()))
            {
                return subnet;
            }
        }
        return null;
    }
    public static Set<ResourceRecord> getInner(Question question, SubNet subnet)
    {
        SetMap<Question,ResourceRecord> map = innerNets.get(subnet);
        Set<ResourceRecord> set = map.get(question);
        if (set != null)
        {
            return set;
        }
        return null;
    }
    public static Set<ResourceRecord> getZone(Question question)
    {
        DomainName qName = question.getQName();
        for (DomainName dn : outerZones.keySet())
        {
            if (qName.isSubDomainOf(dn))
            {
                SetMap<Question,ResourceRecord> map = outerZones.get(dn);
                if (question.getQType() != Constants.ANY)
                {
                    return map.get(question);
                }
                else
                {
                    Set<ResourceRecord> set = new HashSet<ResourceRecord>();
                    for (Question q : map.keySet())
                    {
                        set.addAll(map.get(q));
                    }
                    return set;
                }
            }
        }
        return null;
    }
    public static Set<ResourceRecord> resolveFromCache(DomainName dn, int type, InetSocketAddress sender)
    {
        Set<ResourceRecord> set = resolveAuthorative(dn, type, sender);
        if (set != null && !set.isEmpty())
        {
            return set;
        }
        return getCache(new Question(dn, type));
    }

    public static Set<ResourceRecord> getCache(Question question)
    {
        Set<ResourceRecord> set = cache.get(question);
        if (set != null)
        {
            Set removables = new HashSet<ResourceRecord>();
            long current = System.currentTimeMillis();
            for (ResourceRecord rr : set)
            {
                if (rr.expired(current))
                {
                    removables.add(rr);
                }
            }
            set.removeAll(removables);
            return set;
        }
        return null;
    }

    public static void add(ResourceRecord rr)
    {
        rr.setExpires(new Date());
        cache.put(rr.getQuestion(), rr);
    }

    /**
     * @return the nameServers
     */
    public static List<InetSocketAddress> getNameServers()
    {
        return nameServers;
    }

    /**
     * @return the slaves
     */
    public static List<InetSocketAddress> getSlaves()
    {
        return slaves;
    }

    /**
     * @return the masters
     */
    public static Map<DomainName, InetSocketAddress> getMasters()
    {
        return masters;
    }

    public static ResponseMessage getZoneTransfer(DomainName name)
    {
        return zoneTransferMessage.get(name);
    }

    public static void main(String... args)
    {
        try
        {
            File ff = new File("C:\\Users\\tkv\\Documents\\NetBeansProjects\\DNSServer\\src\\fi\\sw_nets\\net\\dns\\dns.xml");
            Cache cc = new Cache(ff);
            Question question = new Question("valpuri.org", Constants.MX);
            System.err.println(cc.getZone(question));
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
    }

    public void run()
    {
        try
        {
            refreshZones();
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }
        catch (RCodeException ex)
        {
            ex.printStackTrace();
        }
        catch (IllegalNetMaskException ex)
        {
            ex.printStackTrace();
        }
        catch (JAXBException ex)
        {
            ex.printStackTrace();
        }
    }
}
